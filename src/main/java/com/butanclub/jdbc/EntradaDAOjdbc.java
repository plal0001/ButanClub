/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.butanclub.jdbc;

import com.butanclub.dao.EntradaDAO;
import com.butanclub.model.Entrada;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

/**
 *
 * @author Jose Manuel Navarro
 */
@Repository
public class EntradaDAOjdbc implements EntradaDAO {

    private static final String connPoolName = "java:comp/env/jdbc/ButanClub";  //Tomcat
    private static final String[] autoField = {"id"};

    private static final String SQL_COMPRAENTRADA = "INSERT INTO Entradas (usuario,concierto,cantidad) VALUES ( ?, ?,? )";
    private static final String SQL_BUSCAENTRADA = "SELECT * FROM Entradas where id=?";
    private static final String SQL_BUSCAENTRADASTODAS = "SELECT * FROM Entradas where usuario=?";

    @Autowired
    private DataSource ds = null;

    public EntradaDAOjdbc() {
//        if (ds == null) {
//            try {
//                Context context = new InitialContext();
//                ds = (DataSource) context.lookup(connPoolName);
//            } catch (NamingException ex) {
//                Logger.getLogger(UsuarioDAOjdbc.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
    }

    private Entrada entradaMapper(ResultSet rs) throws SQLException {
        Entrada e;
        e = new Entrada(
                rs.getInt("id"),
                rs.getString("usuario"),
                rs.getInt("concierto"),
                rs.getInt("cantidad")
        );
        return e;
    }

    @Override
    public Entrada bucaEntrada(Integer _id) {
        Entrada e = null;
        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_BUSCAENTRADA)) {
            stmn.setInt(1, _id);
            try (ResultSet rs = stmn.executeQuery()) {
                rs.next();
                e = entradaMapper(rs);
            }
        } catch (SQLException ex) {
            Logger.getLogger(UsuarioDAOjdbc.class.getName()).log(Level.SEVERE, null, ex);
        }
        return e;
    }

    @Override
    public boolean crea(Entrada e) {
        boolean creado = false;
        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_COMPRAENTRADA, autoField)) {
            stmn.setString(1, e.getUsuario());
            stmn.setInt(2, e.getConcierto());
            stmn.setInt(3, e.getCantidad());

            stmn.executeUpdate();

            try (ResultSet rs = stmn.getGeneratedKeys()) {
                //Get autogenerated field value
                if (rs != null && rs.next()) {
                    int nuevoId = rs.getInt(1); //RS has only one field with key value
                    e.setId(nuevoId);
                    creado = true;
                }
            } catch (Exception ex) {
                Logger.getLogger(EntradaDAOjdbc.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
        } catch (SQLException ex) {
            Logger.getLogger(EntradaDAOjdbc.class.getName()).log(Level.SEVERE, null, ex);
        }
        return creado;
    }

    @Override
    public List<Entrada> buscaTodos(String _usuario) {
        List<Entrada> lista = new ArrayList<>();
        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_BUSCAENTRADASTODAS)) {
            stmn.setString(1, _usuario);
            ResultSet rs = stmn.executeQuery();

            while (rs.next()) {
                lista.add(entradaMapper(rs));
            }
        } catch (SQLException ex) {
            Logger.getLogger(UsuarioDAOjdbc.class.getName()).log(Level.SEVERE, null, ex);
        }

        return lista;

    }

    @Override
    public boolean guarda(Entrada u) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean borra(Integer id) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public List<Entrada> buscaTodos() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
